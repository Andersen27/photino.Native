# Build Photino.Native project from dev branch in GitHub
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- debug

variables:
  versionprefix: 0.9.0

jobs:
  - job: 'BuildNative'
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-latest'
          rid: 'linux-x64'
        mac-intel:
          imageName: 'macos-12'
          rid: 'osx.12-x64'
        mac-arm64:
          imagename: 'macos-12'
          rid: 'osx.12-arm64'
        windows:
          rid: 'windows-x64'
          imageName: 'windows-latest'

    pool:
      vmImage: $(imageName)

    variables:
      buildConfiguration: 'Release'

    steps:
    #Install dependencies
    - task: CmdLine@2
      displayName: 'Install linux dependencies'
      condition: eq(variables.rid, 'linux-x64')
      inputs:
        script: 'sudo apt-get update && sudo apt-get install libgtk-3-dev libwebkit2gtk-4.0-dev libnotify4 libnotify-dev'

    - task: NuGetCommand@2
      displayName: 'NuGet package restore for Windows native packages'
      condition: eq(variables.rid, 'windows-x64')
      inputs:
        command: 'restore'
        restoreSolution: 'Photino.Native.sln'
        feedsToUse: 'select'

    #NOTE: Release build configuration should not build Test project - it has linked files and will not build
    #- task: DotNetCoreCLI@2
    #  displayName: dotnet restore
    #  inputs:
    #    command: restore
    #    projects: '**/*.csproj'
        
    #Build
    - task: VSBuild@1
      displayName: 'Build Windows native assets'
      condition: eq(variables.rid, 'windows-x64')
      inputs:
        solution: 'Photino.Native.sln'
        platform: 'x64'
        configuration: '$(buildConfiguration)'

    - task: CmdLine@2
      displayName: 'Create output folder for Linux'
      condition: eq(variables.rid, 'linux-x64')
      inputs:
        workingDirectory: './Photino.Native'
        script: 'mkdir x64; cd x64; mkdir $(buildConfiguration)'

    - task: CmdLine@2
      displayName: 'Build Linux native assets'
      condition: eq(variables.rid, 'linux-x64')
      inputs:
        workingDirectory: './Photino.Native'
        script: 'gcc -std=c++11 -shared -DOS_LINUX Exports.cpp Photino.Linux.cpp -o x64/$(buildConfiguration)/Photino.Native.so `pkg-config --cflags --libs gtk+-3.0 webkit2gtk-4.0 libnotify` -fPIC'

    - task: CmdLine@2
      displayName: 'Create output folder for macOS-intel'
      condition: eq(variables.rid, 'osx.12-x64')
      inputs:
        workingDirectory: '.'
        script: 'mkdir -p ./x64/$(buildConfiguration)'

    - task: CmdLine@2
      displayName: 'Build macOS-intel native assets'
      condition: eq(variables.rid, 'osx.12-x64')
      inputs:
        workingDirectory: '.'
        script: 'make mac-dev && mv ./lib/dev/Photino.Native.dylib ./x64/$(buildConfiguration)/Photino.Native.dylib'

    - task: CmdLine@2
      displayName: 'Create output folder for macOS-arm64'
      condition: eq(variables.rid, 'osx.12-arm64')
      inputs:
        workingDirectory: '.'
        script: 'mkdir -p ./arm64/$(buildConfiguration)'

    - task: CmdLine@2
      displayName: 'Build macOS-arm64 native assets'
      condition: eq(variables.rid, 'osx.12-arm64')
      inputs:
        workingDirectory: '.'
        script: 'make mac-dev && mv ./lib/dev/Photino.Native.dylib ./arm64/$(buildConfiguration)/Photino.Native.Arm64.dylib'
      
    #Publish native output to Artifacts
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Photino.Native.dll (windows) to artifacts'
      condition: eq(variables.rid, 'windows-x64')
      inputs:
        targetPath: './Photino.Native/x64/$(buildConfiguration)/Photino.Native.dll'
        artifactName: 'Photino.Native.dll'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish WebView2Loader.dll (windows) to artifacts'
      condition: eq(variables.rid, 'windows-x64')
      inputs:
        targetPath: './Photino.Native/x64/$(buildConfiguration)/WebView2Loader.dll'
        artifactName: 'WebView2Loader.dll'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Photino.Native.nuspec (windows) to artifacts'
      condition: eq(variables.rid, 'windows-x64')
      inputs:
        targetPath: './Photino.Native/Photino.Native.nuspec'
        artifactName: 'Photino.Native.nuspec'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Photino.Native.so (linux) to artifacts'
      condition: eq(variables.rid, 'linux-x64')
      inputs:
        targetPath: './Photino.Native/x64/$(buildConfiguration)/Photino.Native.so'
        artifactName: 'Photino.Native.so'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Photino.Native.dylib (macOS) to artifacts'
      condition: eq(variables.rid, 'osx.12-x64')
      inputs:
        targetPath: './x64/$(buildConfiguration)/Photino.Native.dylib'
        artifactName: 'Photino.Native.dylib'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Photino.Native.Arm64.dylib (macOS-ARM) to artifacts'
      condition: eq(variables.rid, 'osx.12-arm64')
      inputs:
        targetPath: './arm64/$(buildConfiguration)/Photino.Native.Arm64.dylib'
        artifactName: 'Photino.Native.Arm64.dylib'


  #1 instance to download all native files, create NuGet package and publish to Artifacts
  - job: 'PublishPackage'
    dependsOn: 'BuildNative'
    
    pool:
      vmImage: 'windows-latest'
    
    variables:
      buildConfiguration: 'Release'
    
    steps:
    #Download native files from Artifacts
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Photino.Native.dll'
      inputs:
        artifact: 'Photino.Native.dll'

    - task: DownloadPipelineArtifact@2
      displayName: 'Download WebView2Loader.dll'
      inputs:
        artifact: 'WebView2Loader.dll'

    - task: DownloadPipelineArtifact@2
      displayName: 'Download Photino.Native.nuspec'
      inputs:
        artifact: 'Photino.Native.nuspec'

    - task: DownloadPipelineArtifact@2
      displayName: 'Download Photino.Native.so'
      inputs:
        artifact: 'Photino.Native.so'

    - task: DownloadPipelineArtifact@2
      displayName: 'Download Photino.Native.dll'
      inputs:
        artifact: 'Photino.Native.dylib'

    - task: DownloadPipelineArtifact@2
      displayName: 'Download Photino.Native.Arm64.dll'
      inputs:
        artifact: 'Photino.Native.Arm64.dylib'

    #- task: CmdLine@2
    #  displayName: 'List downloaded files'
    ##  inputs:
    #    workingDirectory: '$(Pipeline.Workspace)'
    #    script: 'dir'

    #Create NuGet package
    - task: CmdLine@2
      displayName: 'Create NuGet package'
      inputs:
        workingDirectory: '$(Pipeline.Workspace)'
        script: 'nuget.exe pack Photino.Native.nuspec -Version $(versionprefix)-$(Build.BuildNumber) -NonInteractive -Properties version=$(versionprefix)-$(Build.BuildNumber)'

    #Publish NuGet package to Artifacts
    - task: NuGetAuthenticate@0
      displayName: 'NuGet Authenticate'

    - task: NuGetCommand@2
      displayName: 'NuGet push'
      inputs:
        command: push
        feedsToUse: 'select'
        publishVstsFeed: 'Photino.Native/PhotinoPackages'
        packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
        allowPackageConflicts: true
