# Build Photino.Native project from dev branch in GitHub
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- debug

variables:
  versionprefix: 0.9.0
  buildConfiguration: 'Release'

jobs:
  - job: 'BuildNative'
    strategy:
      matrix:
        windows-intel:
          rid: 'win-x64'
          imageName: 'windows-latest'
        # windows-arm64:
        #   rid: 'win-arm64'
        #   imageName: 'windows-latest'
        # linux-intel:
        #   rid: 'linux-x64'
        #   imageName: 'ubuntu-latest'
        # linux-arm64:
        #   rid: 'linux-arm64'
        #   imageName: 'ubuntu-latest'
        # mac-intel:
        #   rid: 'osx.12-x64'
        #   imageName: 'macos-12'
        # #mac-arm64:
        # #  rid: 'osx.12-arm64'
        # #  imagename: 'macos-12'

    pool:
      vmImage: $(imageName)

    steps:
    # Install dependencies
    # Windows
    - task: NuGetCommand@2
      displayName: 'NuGet package restore for Windows (intel) native packages'
      condition: eq(variables.rid, 'win-x64')
      inputs:
        command: 'restore'
        restoreSolution: 'Photino.Native.sln'
        feedsToUse: 'select'

    - task: NuGetCommand@2
      displayName: 'NuGet package restore for Windows (arm64) native packages'
      condition: eq(variables.rid, 'win-arm64')
      inputs:
        command: 'restore'
        restoreSolution: 'Photino.Native.sln'
        feedsToUse: 'select'
    
    # Linux
    - task: CmdLine@2
      displayName: 'Install linux (intel) dependencies'
      condition: eq(variables.rid, 'linux-x64')
      inputs:
        script: 'sudo apt-get update && sudo apt-get install libgtk-3-dev libwebkit2gtk-4.0-dev libnotify4 libnotify-dev'

    - task: CmdLine@2
      displayName: 'Install linux (arm64) dependencies'
      condition: eq(variables.rid, 'linux-arm64')
      inputs:
        script: 'sudo apt-get update && sudo apt-get install libgtk-3-dev libwebkit2gtk-4.0-dev libnotify4 libnotify-dev'
        
    # Build
    # Windows x64
    - task: VSBuild@1
      displayName: 'Build Windows (intel) native assets'
      condition: eq(variables.rid, 'win-x64')
      inputs:
        solution: 'Photino.Native.sln'
        platform: 'x64'
        configuration: '$(buildConfiguration)'

    # Windows ARM64
    - task: VSBuild@1
      displayName: 'Build Windows (arm64) native assets'
      condition: eq(variables.rid, 'win-arm64')
      inputs:
        solution: 'Photino.Native.sln'
        platform: 'arm64'
        configuration: '$(buildConfiguration)'

    # Linux x64
    - task: CmdLine@2
      displayName: 'Create output folder for Linux (intel)'
      condition: eq(variables.rid, 'linux-x64')
      inputs:
        workingDirectory: './Photino.Native'
        script: 'mkdir x64; cd x64; mkdir $(buildConfiguration)'

    - task: CmdLine@2
      displayName: 'Build Linux (intel) native assets'
      condition: eq(variables.rid, 'linux-x64')
      inputs:
        workingDirectory: './Photino.Native'
        script: 'gcc -std=c++11 -shared -DOS_LINUX Exports.cpp Photino.Linux.cpp -o x64/$(buildConfiguration)/Photino.Native.so `pkg-config --cflags --libs gtk+-3.0 webkit2gtk-4.0 libnotify` -fPIC'

    # Linux ARM64
    - task: CmdLine@2
      displayName: 'Create output folder for Linux (arm64)'
      condition: eq(variables.rid, 'linux-arm64')
      inputs:
        workingDirectory: './Photino.Native'
        script: 'mkdir arm64; cd arm64; mkdir $(buildConfiguration)'

    - task: CmdLine@2
      displayName: 'Build Linux (arm64) native assets'
      condition: eq(variables.rid, 'linux-arm64')
      inputs:
        workingDirectory: './Photino.Native'
        script: 'gcc -std=c++11 -shared -DOS_LINUX Exports.cpp Photino.Linux.cpp -o arm64/$(buildConfiguration)/Photino.Native.so `pkg-config --cflags --libs gtk+-3.0 webkit2gtk-4.0 libnotify` -fPIC'

    # macOS x64
    - task: CmdLine@2
      displayName: 'Create output folder for macOS (intel)'
      condition: eq(variables.rid, 'osx.12-x64')
      inputs:
        workingDirectory: '.'
        script: 'mkdir -p ./x64/$(buildConfiguration)'

    - task: CmdLine@2
      displayName: 'Build macOS (intel) native assets'
      condition: eq(variables.rid, 'osx.12-x64')
      inputs:
        workingDirectory: '.'
        script: 'make mac-dev && mv ./lib/dev/Photino.Native.dylib ./x64/$(buildConfiguration)/Photino.Native.dylib'

    # macOS ARM64 (no build machine for maxOS M1 available as of Sep 2022)
    #- task: CmdLine@2
    #  displayName: 'Create output folder for macOS (ARM64)'
    #  condition: eq(variables.rid, 'osx.12-arm64')
    #  inputs:
    #    workingDirectory: '.'
    #    script: 'mkdir -p ./arm64/$(buildConfiguration)'

    #- task: CmdLine@2
    #  displayName: 'Build macOS (ARM64) native assets'
    #  condition: eq(variables.rid, 'osx.12-arm64')
    #  inputs:
    #    workingDirectory: '.'
    #    script: 'make mac-dev && mv ./lib/dev/Photino.Native.dylib ./arm64/$(buildConfiguration)/Photino.Native.ARM64.dylib'
      
    # Publish native output to Artifacts
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Photino.Native.nuspec to artifacts'
      condition: eq(variables.rid, 'win-x64')
      inputs:
        targetPath: './Photino.Native/Photino.Native.nuspec'
        artifactName: 'Photino.Native.nuspec'

    # Windows x64
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Photino.Native.dll (Windows x64) to artifacts'
      condition: eq(variables.rid, 'win-x64')
      inputs:
        targetPath: './Photino.Native/x64/$(buildConfiguration)/Photino.Native.dll'
        artifactName: 'Photino.Native.dll'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish WebView2Loader.dll (Windows x64) to artifacts'
      condition: eq(variables.rid, 'win-x64')
      inputs:
        targetPath: './Photino.Native/x64/$(buildConfiguration)/WebView2Loader.dll'
        artifactName: 'WebView2Loader.dll'

    # Windows ARM64
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Photino.Native.ARM64.dll (Windows ARM64) to artifacts'
      condition: eq(variables.rid, 'win-arm64')
      inputs:
        targetPath: './Photino.Native/arm64/$(buildConfiguration)/Photino.Native.dll'
        artifactName: 'Photino.Native.ARM64.dll'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish WebView2Loader.ARM64.dll (Windows ARM64) to artifacts'
      condition: eq(variables.rid, 'win-arm64')
      inputs:
        targetPath: './Photino.Native/arm64/$(buildConfiguration)/WebView2Loader.dll'
        artifactName: 'WebView2Loader.ARM64.dll'

    # Linux x64
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Photino.Native.so (Linux x64) to artifacts'
      condition: eq(variables.rid, 'linux-x64')
      inputs:
        targetPath: './Photino.Native/x64/$(buildConfiguration)/Photino.Native.so'
        artifactName: 'Photino.Native.so'

    # Linux ARM64
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Photino.Native.ARM64.so (Linux ARM64) to artifacts'
      condition: eq(variables.rid, 'linux-arm64')
      inputs:
        targetPath: './Photino.Native/arm64/$(buildConfiguration)/Photino.Native.so'
        artifactName: 'Photino.Native.ARM64.so'
    
    # macOS x64
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Photino.Native.dylib (macOS x64) to artifacts'
      condition: eq(variables.rid, 'osx.12-x64')
      inputs:
        targetPath: './x64/$(buildConfiguration)/Photino.Native.dylib'
        artifactName: 'Photino.Native.dylib'

    # macOS ARM64 (no build machine for maxOS M1 available as of Sep 2022)
    #- task: PublishPipelineArtifact@1
    #  displayName: 'Publish Photino.Native.ARM64.dylib (macOS ARM64) to artifacts'
    #  condition: eq(variables.rid, 'osx.12-arm64')
    #  inputs:
    #    targetPath: './arm64/$(buildConfiguration)/Photino.Native.ARM64.dylib'
    #    artifactName: 'Photino.Native.ARM64.dylib'

  # 1 instance to download all native files, create NuGet package and publish to Artifacts
  - job: 'PublishPackage'
    dependsOn: 'BuildNative'
    
    pool:
      vmImage: 'windows-latest'
    
    variables:
      buildConfiguration: 'Release'
    
    steps:
    # Download native files from Artifacts
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Photino.Native.nuspec'
      inputs:
        artifact: 'Photino.Native.nuspec'

    - task: DownloadPipelineArtifact@2
      displayName: 'Download Photino.Native Libraries'
      inputs:
        patterns: |
          ./*.dll
          ./*.dylib
          ./*.so
    
    - task: CmdLine@2
      displayName: 'List downloaded files'
      inputs:
        workingDirectory: '$(Pipeline.Workspace)'
        script: 'dir'

    # Create NuGet package
    - task: CmdLine@2
      displayName: 'Create NuGet package'
      inputs:
        workingDirectory: '$(Pipeline.Workspace)'
        script: 'nuget.exe pack Photino.Native.nuspec -Version $(versionprefix)-$(Build.BuildNumber) -NonInteractive -Properties version=$(versionprefix)-$(Build.BuildNumber)'

    # Publish NuGet package to Artifacts
    - task: NuGetAuthenticate@0
      displayName: 'NuGet Authenticate'

    - task: NuGetCommand@2
      displayName: 'NuGet push'
      inputs:
        command: push
        feedsToUse: 'select'
        publishVstsFeed: 'Photino.Native/PhotinoPackages'
        packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
        allowPackageConflicts: true
